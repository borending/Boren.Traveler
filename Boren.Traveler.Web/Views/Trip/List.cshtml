@{
    ViewData["Title"] = "旅行";
}

@section Styles {
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Material+Icons" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@mdi/font@5.x/css/materialdesignicons.min.css" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vuetify@3.6.14/dist/vuetify.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vuetify@3.6.14/dist/vuetify-labs.css" />
}

<div id="app">
    <v-data-table-server v-model:items-per-page="itemsPerPage"
                         :headers="headers"
                         :items="serverItems"
                         :items-length="totalItems"
                         :loading="loading"
                         :search="search"
                         item-value="name"
                         v-on:update:options="fetchItems"></v-data-table-server>

    @* <v-data-table :headers="headers"
    :items="desserts"
    :sort-by="[{ key: 'calories', order: 'asc' }]">
    <template v-slot:top>
    <v-toolbar flat>
    <v-toolbar-title>我的旅行</v-toolbar-title>
    <v-divider class="mx-4" inset vertical></v-divider>
    <v-spacer></v-spacer>
    <v-dialog v-model="dialog" max-width="500px">
    <template v-slot:activator="{ props }">
    <v-btn class="mb-2" color="primary" dark v-bind="props">
    新增旅行
    </v-btn>
    </template>
    <v-card>
    <v-card-title>
    <span class="text-h5">{{ formTitle }}</span>
    </v-card-title>
    <v-card-text>
    <v-container>
    <v-row>
    <v-col cols="12" md="4" sm="6">
    <v-text-field v-model="editedItem.name"
    label="名稱"></v-text-field>
    </v-col>
    <v-col cols="12" md="4" sm="6">
    <v-text-field v-model="editedItem.calories"
    label="啟程日"></v-text-field>
    </v-col>
    <v-col cols="12" md="4" sm="6">
    <v-text-field v-model="editedItem.fat"
    label="回程日"></v-text-field>
    </v-col>
    </v-row>
    </v-container>
    </v-card-text>
    <v-card-actions>
    <v-spacer></v-spacer>
    <v-btn color="blue-darken-1" variant="text" v-on:click="save">
    儲存
    </v-btn>
    <v-btn color="blue-darken-1" variant="text" v-on:click="close">
    取消
    </v-btn>
    </v-card-actions>
    </v-card>
    </v-dialog>
    <v-dialog v-model="dialogDelete" max-width="500px">
    <v-card>
    <v-card-title class="text-h5">確定要刪除這筆紀錄嗎 ?</v-card-title>
    <v-card-actions>
    <v-spacer></v-spacer>
    <v-btn color="blue-darken-1"
    variant="text"
    v-on:click="deleteItemConfirm">刪吧</v-btn>
    <v-btn color="blue-darken-1" variant="text" v-on:click="closeDelete">取消</v-btn>
    <v-spacer></v-spacer>
    </v-card-actions>
    </v-card>
    </v-dialog>
    </v-toolbar>
    </template>
    <template v-slot:item.actions="{ item }">
    <v-icon class="me-2" size="small" v-on:click="editItem(item)">
    mdi-pencil
    </v-icon>
    <v-icon size="small" v-on:click="deleteItem(item)"> mdi-delete </v-icon>
    </template>
    <template v-slot:no-data>
    <v-btn color="primary" v-on:click="initialize"> Reset </v-btn>
    </template>
    </v-data-table> *@
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@3.4.35/dist/vue.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vuetify@3.6.14/dist/vuetify.min.js"></script>
    @* <partial name="_Script" /> *@
    <script type="module">
        const { createApp, ref } = Vue
        const { createVuetify } = Vuetify
        const vuetify = createVuetify()

        createApp({
            data() {
                return {
                    url: '/api/trips',
                    dialog: false,
                    dialogDelete: false, // ?
                    headers: [
                        { title: '名稱', key: 'Name', sortable: false },
                        { title: '啟程日', key: 'Start', sortable: false },
                        { title: '回程日', key: 'End', sortable: false },
                        { title: '操作', key: 'actions', sortable: false },
                    ],
                    serverItems: [],
                    editedIndex: -1,
                    editedItem: {
                        Name: '',
                        Start: 0,
                        End: 0,
                    },
                    defaultItem: {
                        Name: '',
                        Start: 0,
                        End: 0,
                    }
                }
            },
            computed: { // ?
                formTitle() {
                    return this.editedIndex === -1 ? '新增旅行' : '編輯內容'
                },
            },
            watch: { // ?
                dialog(val) {
                    val || this.close()
                },
                dialogDelete(val) {
                    val || this.closeDelete()
                },
            },
            methods: {
                // editItem(item) {
                //     this.editedIndex = this.desserts.indexOf(item)
                //     this.editedItem = Object.assign({}, item)
                //     this.dialog = true
                // },

                // deleteItem(item) {
                //     this.editedIndex = this.desserts.indexOf(item)
                //     this.editedItem = Object.assign({}, item)
                //     this.dialogDelete = true
                // },

                // deleteItemConfirm() {
                //     this.desserts.splice(this.editedIndex, 1)
                //     this.closeDelete()
                // },

                // close() {
                //     this.dialog = false
                //     this.$nextTick(() => {
                //         this.editedItem = Object.assign({}, this.defaultItem)
                //         this.editedIndex = -1
                //     })
                // },

                // closeDelete() {
                //     this.dialogDelete = false
                //     this.$nextTick(() => {
                //         this.editedItem = Object.assign({}, this.defaultItem)
                //         this.editedIndex = -1
                //     })
                // },

                // save() {
                //     if (this.editedIndex > -1) {
                //         Object.assign(this.desserts[this.editedIndex], this.editedItem)
                //     } else {
                //         this.desserts.push(this.editedItem)
                //     }
                //     this.close()
                // },


                showDialog() {
                    this.dialog = true;
                    this.editedIndex = -1;
                    this.editedItem = { ...this.defaultItem };
                },
                closeDialog() {
                    this.dialog = false;
                },
                created() {
                    console.log('created')
                    this.fetchItems();
                },
                fetchItems() {
                    $.get(this.url, function (data) {
                         this.serverItems = ref(data);
                    });

                    // this.serverItems = [{ Name: 'Good2' }]
                },
                saveItem() {
                    if (this.editedIndex > -1) {
                        axios.put(`${this.url}/${this.editedItem.id}`, this.editedItem).then(() => {
                            this.fetchItems();
                            this.closeDialog();
                        });
                    } else {
                        axios.post(this.url, this.editedItem).then(() => {
                            this.fetchItems();
                            this.closeDialog();
                        });
                    }
                },
                editItem(item) {
                    this.editedIndex = this.items.indexOf(item);
                    this.editedItem = { ...item };
                    this.dialog = true;
                },
                deleteItem(item) {
                    const id = item.id;
                    axios.delete(`${this.url}/${id}`).then(() => {
                        this.fetchItems();
                    });
                }
            }
        }).use(vuetify).mount('#app')
    </script>
}